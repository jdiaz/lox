/*
	generated by GenerateAst.js

	interface Visitor<R> {
		 R visitExpressionStmt(Visitor<Expression> visitor)
		 R visitPrintStmt(Visitor<Print> visitor)
		 R visitVarStmt(Visitor<Var> visitor)
	}
*/

/* abstract class */
class Stmt {
	accept (visitor) {}
}

class Expression extends Stmt {
	constructor(expression) {
		super()
		this.expression = expression
	}

	/* Expression accept(Visitor<Expression> visitor) */
	accept(visitor) {
		return visitor.visitExpressionStmt(this)
	}
}

class Print extends Stmt {
	constructor(expression) {
		super()
		this.expression = expression
	}

	/* Print accept(Visitor<Print> visitor) */
	accept(visitor) {
		return visitor.visitPrintStmt(this)
	}
}

class Var extends Stmt {
	constructor(name,initializer) {
		super()
		this.name = name
		this.initializer = initializer
	}

	/* Var accept(Visitor<Var> visitor) */
	accept(visitor) {
		return visitor.visitVarStmt(this)
	}
}

module.exports = {
	Expression,
	Print,
	Var
}
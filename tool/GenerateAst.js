const fs = require('fs')
const path = require('path')
const {log, level, logError} = require('../src/log')

class GenerateAst {

  static run() {
    
    const args = process.argv
    if (args.length !== 3) {
      log('Usage: node GenerateAsk.js <output directory>\n')
      process.exit(1)
    }
    
    const outputDir = args[2]

    GenerateAst._defineAst(outputDir,  'Expr', [
      {type: 'Assign', fields: ['name', 'value']},
      {type: 'Binary', fields: ['left', 'operator', 'right']},
      {type: 'Grouping', fields: ['expression']},
      {type: 'Literal', fields: ['value']},
      {type: 'Unary', fields: ['operator', 'right']},
      {type: 'Variable', fields: ['name']},
    ])

    GenerateAst._defineAst(outputDir, 'Stmt', [
      {type: 'Block', fields: ['statements']},
      {type: 'Expression', fields: ['expression']},
      {type: 'Print', fields: ['expression']},
      {type: 'Var', fields: ['name', 'initializer']},
    ])
  }

  static _defineAst(outputDir, baseName, typesArr, comments=true) {
    const outputPath = outputDir + '/' + baseName + '.js'
    const writer = fs.createWriteStream(outputPath)

    const tab = '\t'
    const comma = ','

    if (comments) {
      writer.write('/*')
      writer.write(`\n${tab}generated by ${path.basename(__filename)}\n\n`)
      writer.write(`${tab}interface Visitor<R> {\n`)
       typesArr.forEach(row => {
        writer.write(`${tab}${tab} R visit${row.type}${baseName}(Visitor<${row.type}> visitor)\n`)
      })
      writer.write(`${tab}}\n*/\n\n`)
    }
    writer.write('/* abstract class */\n')
    writer.write(`class ${baseName} {\n`)  
    writer.write(`${tab}accept (visitor) {}\n`)
    writer.write(`}\n\n`)

    typesArr.forEach(row => {
      
      writer.write(`class ${row.type} extends ${baseName} {\n`)
      // constructor
      writer.write(`${tab}constructor(`)
      row.fields.forEach((field, i, arr) => {
        writer.write(`${field}${i !== arr.length - 1 ? comma : ''}`)
      })
      writer.write(`) {\n`)
      
      writer.write(`${tab}${tab}super()\n`)
      row.fields.forEach(field => {
        writer.write(`${tab}${tab}this.${field} = ${field}\n`)  
      })
      writer.write(`${tab}}\n\n`)
      // constructor end

      // visitor function
      if (comments) writer.write(`${tab}/* ${row.type} accept(Visitor<${row.type}> visitor) */\n`)
      writer.write(`${tab}accept(visitor) {\n`)
      writer.write(`${tab}${tab}return visitor.visit${row.type}${baseName}(this)\n`)
      writer.write(`${tab}}\n`)
      
      // class end
      writer.write(`}\n\n`)
    })

    // module exports
    writer.write(`module.exports = {\n`)
    typesArr.forEach((row, i, arr) => {
      writer.write(`${tab}${row.type}${i !== arr.length - 1 ? comma : ''}\n`)
    })
    writer.write(`}`)

    writer.end() 
  }
}

GenerateAst.run()